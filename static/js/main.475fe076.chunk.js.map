{"version":3,"sources":["NavBar/NavBar.module.css","Profile/Profile.module.css","Messages/Messages.module.css","Header/Header.module.css","Header/logo.jpg","Content/Content.module.css","serviceWorker.js","Header/Header.jsx","NavBar/NavBar.jsx","Content/Content.jsx","Profile/Profile.jsx","Messages/Messages.jsx","App.js","pseudoRedux/redux.js","rerender.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Header","className","style","header","to","src","logo","alt","NavBar","navbar","item","activeClassName","activeLink","Content","content","WallPost","props","post","postMessage","likes","likesCount","Profile","posts","state","profilePage","newPostElement","React","createRef","profile","avatar","name","addPost","id","cols","rows","placeholder","ref","maxLength","onClick","textareaValue","current","value","map","index","key","Message","message","Dialog","dialog","avatarSrc","Messages","messagePage","dialogs","users","user","avatars","messages","App","path","render","component","newPost","unshift","rerender","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.475fe076.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"NavBar_navbar__2KBc-\",\"item\":\"NavBar_item__1QksE\",\"activeLink\":\"NavBar_activeLink__hbR1l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__2N0Ai\",\"avatar\":\"Profile_avatar__H9aiU\",\"post\":\"Profile_post__1Y9Z6\",\"likes\":\"Profile_likes__w1pV6\",\"addPost\":\"Profile_addPost__216MB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messagePage\":\"Messages_messagePage__3iSOV\",\"dialog\":\"Messages_dialog__3lrh-\",\"avatar\":\"Messages_avatar__3Wxt-\",\"name\":\"Messages_name__3e0dD\",\"message\":\"Messages_message__1zZLE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1m9KH\"};","module.exports = __webpack_public_path__ + \"static/media/logo.8d0d6cf4.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Content_content__3jYHC\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport style from './Header.module.css'\nimport logo from './logo.jpg';\nimport {NavLink} from \"react-router-dom\";\n\nconst Header = () => {\n    return (\n        <header className={style.header}>\n           <NavLink to={\"/content\"}><img src={logo} alt=\"logo\"/></NavLink>\n        </header>\n    )\n};\n\nexport default Header;","import React from 'react'\nimport style from './NavBar.module.css'\nimport {NavLink} from \"react-router-dom\";\n\nconst NavBar = () => {\n    return (\n        <header className={style.navbar}>\n            <div className={style.item}>\n                <NavLink to={\"/profile\"} activeClassName={style.activeLink}>Profile</NavLink>\n            </div>\n            <div className={style.item}>\n                <NavLink to={\"/messages\"} activeClassName={style.activeLink}>Messages</NavLink>\n            </div>\n            <div className={style.item}>\n                <NavLink to={\"/content\"} activeClassName={style.activeLink}>News</NavLink>\n            </div>\n        </header>\n    )\n};\n\nexport default NavBar;","import React from 'react'\nimport style from './Content.module.css'\n\nconst Content = () => {\n    return (\n        <div className={style.content}>\n            <h1>Content</h1>\n            <div>\n                <p>We used media queries to define a new layout when the viewport is 30 rem wide or greater. We defined the value in rems instead of pixels to improve the accessibility of the page for users increasing the font size. For most users with devices less than 500 px wide, which is approximately 30 rem when a rem is the default 16 px, the narrow layout will appear. However, if users have increased their font size, they may get the narrow layout on their tablet or even desktop monitor.\n\n                    While we could have turned the body into a column-direction flex container, with only sectioning level children, that’s the default layout, so it wasn’t necessary on the narrow screen. However, when we have wider viewports, we want the navigation to be between the header and the main content, not between the main content and the footer, so we need to change the order of the appearance. We set nav, header  to make theappear before all their sibling flex items. The siblings default to order: 0; which is the default and a greater value. The group order puts those two elements first, with header coming before nav, as that is the order of the source code, before all the other flex item siblings, in the order they appear in the source code. </p>\n            </div>\n        </div>\n    )\n};\n\nexport default Content;","import React from 'react'\nimport style from './Profile.module.css'\n\nconst WallPost = (props) => {\n    return (\n        <div className={style.post}>\n            <img src=\"https://kwork.ru/pics/t3/85/109231-1.jpg\" alt=\"PostAva\"/>\n            <div>\n                {props.postMessage}\n            </div>\n            <div className={style.likes}>\n                <p>likes: {props.likesCount}</p>\n            </div>\n        </div>\n    )\n};\n\nconst Profile = (props) => {\n    let posts = props.state.profilePage.posts;\n    let newPostElement = React.createRef();\n\n    let addPost = () => {\n        let textareaValue = newPostElement.current.value;\n        props.addPost(textareaValue);\n        newPostElement.current.value = '';\n    };\n\n    return (\n        <div className={style.profile}>\n            <div>\n                <div className={style.avatar}>\n                    <img src=\"https://kwork.ru/pics/t3/85/109231-1.jpg\" alt=\"AdminLogo\"/>\n                </div>\n                <div className={style.name}>\n                    <h1>SanchoXD</h1>\n                </div>\n            </div>\n            <div>\n                <h2>My posts</h2>\n                <div className={style.addPost}>\n                    <textarea name=\"shitposting\" id=\"dick\" cols=\"50\" rows=\"4\"\n                              placeholder=\"ShitPost something, only 100 chars\" ref={newPostElement} maxLength=\"100\"></textarea>\n                    <button onClick={addPost}>Post!</button>\n                </div>\n                <div>\n                    {posts\n                        .map((post, index) =>\n                            <WallPost\n                                postMessage={posts[index].postMessage}\n                                likesCount={posts[index].likesCount}\n                                key={index}\n                            />)}\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default Profile;","import React from 'react'\nimport style from './Messages.module.css'\n\n\nconst Message = (props) => {\n    return (\n        <div>\n            {props.message}\n        </div>\n    );\n};\n\nconst Dialog = (props) => {\n    return (\n        <div className={style.dialog}>\n            <div className={style.avatar}>\n                <img src={props.avatarSrc} alt=\"avatar\"/>\n            </div>\n            <div className={style.name}>\n                {props.name}\n            </div>\n            <div className={style.message}>\n                <Message message={props.message}/>\n            </div>\n        </div>\n    )\n};\n\n\nconst Messages = (props) => {\n    return (\n        <div className={style.messagePage}>\n            <div className={style.dialogs}>\n\n                {props.state.users.map(user => {\n                    return <Dialog\n                        name={user.name}\n                        id={user.id}\n                        avatarSrc={props.state.avatars[user.id - 1].src}\n                        message={props.state.messages[user.id - 1].message}\n                        key={user.id}\n                    />\n                })}\n\n            </div>\n        </div>\n    )\n};\n\nexport default Messages;","import React from 'react';\nimport './App.css';\nimport Header from \"./Header/Header\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport NavBar from \"./NavBar/NavBar\";\nimport Content from \"./Content/Content\";\nimport Profile from \"./Profile/Profile\";\nimport Messages from \"./Messages/Messages\";\n\nfunction App(props) {\n    return (\n        <BrowserRouter>\n            <Header/>\n            <div className={\"wrapper\"}>\n                <NavBar/>\n                <Route path={\"/profile\"} render={() => <Profile state={props.state} addPost={props.addPost}/>}/>\n                <Route path={\"/messages\"} render={() => <Messages state={props.state.messagePage}/>}/>\n                <Route path={\"/content\"} component={Content}/>\n            </div>\n        </BrowserRouter>\n\n    );\n}\n\nexport default App;\n","import rerender from \"../rerender\";\n\nlet state = {\n    messagePage: {\n        users: [\n            {id: 1, name: 'Sasha'},\n            {id: 2, name: 'Dima'},\n            {id: 3, name: 'Misha'},\n            {id: 4, name: 'Serodja'}\n        ],\n        avatars: [\n            {id: 1, src: 'https://kwork.ru/pics/t3/85/109231-1.jpg'},\n            {id: 2, src: 'http://cs319323.vk.me/v319323049/70e1/2gddfIt0mvc.jpg'},\n            {id: 3, src: 'https://pp.userapi.com/LVQJ5Dy3z75hdb_Avp0L0EEMykrIdy_r1mOaIA/tuyWWTGi0rA.jpg?ava=1'},\n            {id: 4, src: 'https://www.meme-arsenal.com/memes/1e929458a261d856b237a3ad021ac0ea.jpg'}\n        ],\n        messages: [\n            {id: 1, message: 'Pochemu'},\n            {id: 2, message: 'Rot'},\n            {id: 3, message: 'In'},\n            {id: 4, message: 'Govne?'}\n        ]\n    },\n    profilePage: {\n        posts: [\n            {id: 1, postMessage: 'Hello, React!', likesCount: 1337}\n        ]\n    }\n};\n\nexport let addPost = (message) => {\n    let newPost = {\n        id:228,\n        postMessage: message,\n        likesCount: 1337\n    };\n    state.profilePage.posts.unshift(newPost);\n    rerender();\n};\n\nexport default state;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport state from './../src/pseudoRedux/redux';\nimport {addPost} from './../src/pseudoRedux/redux';\n\nlet rerender = () => {\n    ReactDOM.render(<App state={ state } addPost={addPost}/>, document.getElementById('root'));\n};\n\nexport default rerender;\n","import './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport rerender from \"./rerender\";\n\nrerender();\n\n/*ReactDOM.render(<App state={ state } addPost={addPost}/>, document.getElementById('root'));*/\n\nserviceWorker.unregister();\n"],"sourceRoot":""}